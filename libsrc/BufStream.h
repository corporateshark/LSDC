/**
 * \file BufStream.h
 * \brief
 *
 * LinderScript Database Compiler
 *
 * \version 0.8.10c
 * \date 30/07/2010
 * \author Sergey Kosarevsky, 2005-2010
 * \author Viktor Latypov, 2007-2010
 * \author support@linderdaum.com http://www.linderdaum.com
 */

#ifndef __BufStream__h__included__
#define __BufStream__h__included__

#include <string>
#include <sstream>
#include <vector>

using namespace std;

class buffered_stream;
buffered_stream& endl( buffered_stream& stream );

/**
   Buffered stream acts like ordinary outstream,
   but when the write() method is called it check whether Buffer
   coincides with the output file.

   Thus, every source file generated by the LSDC tool
   is overwritten only when its actual contents changes.
*/
class buffered_stream
{
public:
   buffered_stream() : ReferenceFile( "" )
   {
      clear();
   }

   buffered_stream( const char* ref_file )
   {
      set_reference_file( ref_file );
      clear();
   }

   template<class T>
   buffered_stream& operator << ( const T& val )
   {
      Buffer << val;
      return *this;
   }

   buffered_stream& operator << ( buffered_stream& ( *proc )( buffered_stream& stream ) )
   {
      return proc( *this );
   }

   buffered_stream& operator << ( const char* str )
   {
      Buffer << str;
      return *this;
   }

   void set_reference_file( const char* fname )
   {
      ReferenceFile = string( fname );
   }

   void clear()
   {
      ReferenceBuffer.clear();
      Buffer.str( "" );
   }

   void endl()
   {
      ReferenceBuffer.push_back( Buffer.str() );
      Buffer.str( "" );
   }

   /// Flush buffer contents if it is not the same as the file
   void write();

   /// Destructor tries to save current contents
   ~buffered_stream()
   {
      write();
   }

   // some code generation utility functions

   void Include( const string& IncFile )
   {
      ( *this ) << "#include \"" << IncFile << "\"" << ::endl;
   }

	void WriteDoxygenHeader( const string& FileName, const string& Brief );
private:
   /// in-mem contents buffer
   ostringstream Buffer;

   string ReferenceFile;

   vector<string> ReferenceBuffer;

private:
   bool CompareToReference( const char* InFileName );
};

#endif
